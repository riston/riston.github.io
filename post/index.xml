<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Risto&#39;s magic stuff</title>
    <link>https://riston.github.io/post/</link>
    <description>Recent content in Posts on Risto&#39;s magic stuff</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 05 Jul 2017 23:30:32 +0300</lastBuildDate>
    
	<atom:link href="https://riston.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Data scraping with headless Chrome</title>
      <link>https://riston.github.io/post/headless-chrome-scrape/</link>
      <pubDate>Wed, 05 Jul 2017 23:30:32 +0300</pubDate>
      
      <guid>https://riston.github.io/post/headless-chrome-scrape/</guid>
      <description>With the recent years, the JavaScript language adoption has skyrocketed and it&amp;rsquo;s hard to find web pages which are not using a single line of JavaScript. Many sites have converted from the traditional model of server side rendered pages to Single Page Applications (SPA). Which means that traditional web data mining, scrapers tools do not work with the SPA applications or do not give the expected results due to the dynamic nature.</description>
    </item>
    
    <item>
      <title>Raspberry Pi surveillance camera with ML</title>
      <link>https://riston.github.io/post/raspberry-pi-camera/</link>
      <pubDate>Mon, 30 Jan 2017 22:20:41 +0300</pubDate>
      
      <guid>https://riston.github.io/post/raspberry-pi-camera/</guid>
      <description>Raspberry PI has the most amazing hardware to create your own simple surveillance camera by combining free/open source software. My end goal is to make automated person/human detection and based on the detection send me an email or push notification with an image. Another important goal is to keep the whole solution based on open-source or free software components/services.
Component list:
 Raspberry PI - model A RaspberrryPI official noIR camera(tested also with USB cameras) Passive infrared sensor(PIR)  The flow begins with movement detection, there are roughly two ways for detection: hardware and software.</description>
    </item>
    
    <item>
      <title>Handling SQS queue with AWS Lambda</title>
      <link>https://riston.github.io/post/lambda-sqs-handler/</link>
      <pubDate>Sun, 11 Sep 2016 15:00:41 +0300</pubDate>
      
      <guid>https://riston.github.io/post/lambda-sqs-handler/</guid>
      <description>Batch workers are one of the common patterns to separate more heavyweight data processing background jobs from the main application. That&amp;rsquo;s all great, but to do this you usually need to create a separate server/instance/container job for this and do the maintenance. This could be easily changed by using serverless architecture, provided by Azure, Google, Amazon etc.
In this blog post, we are using specifically Amazon&amp;rsquo;s technology Lambda and SQS. Beside the Simple Queue Service there are also other similar purpose services:</description>
    </item>
    
    <item>
      <title>Automating your SVG export</title>
      <link>https://riston.github.io/post/automate-svg-export/</link>
      <pubDate>Sun, 28 Aug 2016 17:46:41 +0300</pubDate>
      
      <guid>https://riston.github.io/post/automate-svg-export/</guid>
      <description>Exporting could be a quite tedious manual work if you have to do it like 20+ times. Also, the GUI(graphical user interface) settings don&amp;rsquo;t change much, only press export button. With Native Mobile applications usually single size won&amp;rsquo;t be enough and you have to do it again usually in three different sizes. In this post let&amp;rsquo;s go through some alternative options to make exporting much easier.
All the below techniques are used on SVG so if you have Adobe Illustrator content make sure you convert it to plain SVG before.</description>
    </item>
    
  </channel>
</rss>